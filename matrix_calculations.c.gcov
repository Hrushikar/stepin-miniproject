        -:    0:Source:src/matrix_calculations.c
        -:    0:Programs:3
        -:    1:#include<stdlib.h>
        -:    2:#include<stdio.h>
        -:    3:// #include<string.h>
        -:    4:#include<math.h>
        -:    5:#include<float.h>
        -:    6:#include<limits.h>
        -:    7:// #include "../inc/calc.h"
        -:    8:// #include "calc.h"
        -:    9:#include "../inc/matrix.h"
        -:   10:#include "../inc/calcy.h"
        -:   11:// #include "../inc/delay.h"
        -:   12:
        -:   13:
        -:   14:
        -:   15:/* void matrixInputInteger(long int** mat1, long int** mat2, int r1, int c1, int r2, int c2){
        -:   16:    if (r2 < 0 && c2 < 0){
        -:   17:        printf("\nEnter the elements of the first matrix:\n");
        -:   18:        for (int i = 0; i < r1; i++){
        -:   19:            for (int j = 0; j < c1; j++){
        -:   20:                scanf("%d", &mat1[i][j]);
        -:   21:            }
        -:   22:        }
        -:   23:        printf("\nEnter the elements of the second matrix:\n");
        -:   24:        for (int i = 0; i < r1; i++){
        -:   25:            for (int j = 0; j < c1; j++){
        -:   26:                scanf("%d", &mat2[i][j]);
        -:   27:            }
        -:   28:        }
        -:   29:        printf("\n");
        -:   30:    }
        -:   31:    else{
        -:   32:        printf("\nEnter the elements of the first matrix:\n");
        -:   33:        for(int i=0; i<r1; i++){
        -:   34:            for(int j=0; j<c1; j++){
        -:   35:                scanf("%d", &mat1[i][j]);
        -:   36:            }
        -:   37:        }
        -:   38:        printf("\nEnter the elements of the second matrix:\n");
        -:   39:        for(int i=0; i<r2; i++){
        -:   40:            for(int j=0; j<c2; j++){
        -:   41:                scanf("%d", &mat2[i][j]);
        -:   42:            }
        -:   43:        }
        -:   44:    }
        -:   45:    printf("\n");
        -:   46:}
        -:   47:
        -:   48:
        -:   49:void matrixInputDouble(double** mat1, double** mat2, int r1, int c1, int r2, int c2){
        -:   50:    if (r2 < 0 && c2 < 0){
        -:   51:        printf("\nEnter the elements of the first matrix:\n");
        -:   52:        for (int i = 0; i < r1; i++){
        -:   53:            for (int j = 0; j < c1; j++){
        -:   54:                scanf("%lf", &mat1[i][j]);
        -:   55:            }
        -:   56:        }
        -:   57:        printf("\nEnter the elements of the second matrix:\n");
        -:   58:        for (int i = 0; i < r1; i++){
        -:   59:            for (int j = 0; j < c1; j++){
        -:   60:                scanf("%lf", &mat2[i][j]);
        -:   61:            }
        -:   62:        }
        -:   63:        printf("\n");
        -:   64:    }
        -:   65:    else{
        -:   66:        printf("\nEnter the elements of the first matrix:\n");
        -:   67:        for(int i=0; i<r1; i++){
        -:   68:            for(int j=0; j<c1; j++){
        -:   69:                scanf("%lf", &mat1[i][j]);
        -:   70:            }
        -:   71:        }
        -:   72:        printf("\nEnter the elements of the second matrix:\n");
        -:   73:        for(int i=0; i<r2; i++){
        -:   74:            for(int j=0; j<c2; j++){
        -:   75:                scanf("%lf", &mat2[i][j]);
        -:   76:            }
        -:   77:        }
        -:   78:        printf("\n");
        -:   79:    }
        -:   80:}
        -:   81:
        -:   82:
        -:   83:
        -:   84:void matrixPrintInteger(long int** mat, int r, int c){
        -:   85:    for(int i=0; i<r; i++){
        -:   86:        for(int j=0; j<c; j++){
        -:   87:            printf("%d", mat[i][j]);
        -:   88:        }
        -:   89:        printf("\n");
        -:   90:    }
        -:   91:}
        -:   92:
        -:   93:
        -:   94:void matrixPrintDouble(double** mat, int r, int c){
        -:   95:    for(int i=0; i<r; i++){
        -:   96:        for(int j=0; j<c; j++){
        -:   97:            printf("%lf", mat[i][j]);
        -:   98:        }
        -:   99:        printf("\n");
        -:  100:    }
        -:  101:} */
        -:  102:
        -:  103:
        -:  104:
        3:  105:error_t matrixSum(long int** mat1, long int** mat2, long int** res_mat, int r1, int c1, int r2, int c2, int r3, int c3){
        3:  105-block  0
        3:  106:    if(r1!=r2 || c1!=c2){
        3:  106-block  0
        3:  106-block  1
        4:  107:        for(int i=0; i<r1; i++){
        1:  107-block  0
        3:  107-block  1
        4:  107-block  2
       12:  108:            for(int j=0; j<c1; j++){
        3:  108-block  0
        9:  108-block  1
       12:  108-block  2
        9:  109:                res_mat[i][j] = UNDERFLOW;
        -:  110:            }
        -:  111:        }
        1:  112:        return ERROR_OUT_OF_RANGE;
        1:  112-block  0
        -:  113:    }
        7:  114:    for(int i=0; i<r1; i++){
        2:  114-block  0
        5:  114-block  1
        7:  114-block  2
       18:  115:        for(int j=0; j<c1; j++){
        5:  115-block  0
       13:  115-block  1
       18:  115-block  2
       13:  116:            res_mat[i][j] = mat1[i][j] + mat2[i][j];
        -:  117:        }
        -:  118:    }
        2:  119:    return SUCCESS;
        2:  119-block  0
        -:  120:
        -:  121:    // int r, c;  //, r2, c2;
        -:  122:    // printf("\nInteger Matrix Addition:\n\nEnter the dimensions of the matrix:\n");
        -:  123:    // scanf("%d", &r);
        -:  124:    // scanf("%d", &c);
        -:  125:
        -:  126:    // printf("\nEnter the number of rows and columns of the second matrix:\n");
        -:  127:    // scanf("%d", &r1);
        -:  128:    // scanf("%d", &c1);
        -:  129:    
        -:  130:    // printf("\n");
        -:  131:    
        -:  132:    // int matrix_1[r][c], matrix_2[r][c], sum[r][c];
        -:  133:
        -:  134:    // int **matrix_1 = (int **)malloc(r * sizeof(int *));
        -:  135:    // for (int i = 0; i < r; i++)
        -:  136:    //     matrix_1[i] = (int *)malloc(c * sizeof(int));
        -:  137:    // int **matrix_2 = (int **)malloc(r * sizeof(int *));
        -:  138:    // for (int i = 0; i < r; i++)
        -:  139:    //     matrix_2[i] = (int *)malloc(c * sizeof(int));
        -:  140:
        -:  141:    
        -:  142:    // printf("\nEnter the elements of the first matrix:\n");
        -:  143:    // for(int i=0; i<r; i++){
        -:  144:    //     for(int j=0; j<c; j++){
        -:  145:    //         scanf("%d", &matrix_1[i][j]);
        -:  146:    //     }
        -:  147:    // }
        -:  148:    // printf("\nEnter the elements of the second matrix:\n");
        -:  149:    // for(int i=0; i<r; i++){
        -:  150:    //     for(int j=0; j<c; j++){
        -:  151:    //         scanf("%d", &matrix_2[i][j]);
        -:  152:    //     }
        -:  153:    // }
        -:  154:    
        -:  155:    // inputInteger(matrix_1, matrix_2, r, c, -1, -1);
        -:  156:
        -:  157:    // int sum[r][c];
        -:  158:
        -:  159:    // for(int i=0; i<r; i++){
        -:  160:    //     for(int j=0; j<c; j++){
        -:  161:    //         sum[i][j] = matrix_1[i][j] + matrix_2[i][j];
        -:  162:    //     }
        -:  163:    // }
        -:  164:    
        -:  165:    // system("cls");
        -:  166:
        -:  167:    // printf("\nFirst matrix:\n");
        -:  168:
        -:  169:    // printInteger(matrix_1, r, c);
        -:  170:
        -:  171:    // for(int i=0; i<r; i++){
        -:  172:    //     for(int j=0; j<c; j++){
        -:  173:    //         printf("%d ", matrix_1[i][j]);
        -:  174:    //     }
        -:  175:    //     printf("\n");
        -:  176:    // }
        -:  177:    
        -:  178:    // printf("\nSecond matrix:\n");
        -:  179:
        -:  180:    // printInteger(matrix_2, r, r);
        -:  181:
        -:  182:    // for(int i=0; i<r; i++){
        -:  183:    //     for(int j=0; j<c; j++){
        -:  184:    //         printf("%d ", matrix_2[i][j]);
        -:  185:    //     }
        -:  186:    //     printf("\n");
        -:  187:    // }
        -:  188:    
        -:  189:    // printf("\n Sum of the matrices:\n");
        -:  190:
        -:  191:    // printInteger(sum, r, c);
        -:  192:
        -:  193:    // for(int i=0; i<r; i++){
        -:  194:    //     for(int j=0; j<c; j++){
        -:  195:    //         printf("%d ", sum[i][j]);
        -:  196:    //     }
        -:  197:    //     printf("\n");
        -:  198:    // }
        -:  199:    
        -:  200:    // printf("\nExiting in 5 seconds...");
        -:  201:    // delay(5);
        -:  202:}
        -:  203:
        -:  204:
        3:  205:error_t matrixSumDouble(double** matd1, double** matd2, double** res_matd, int r1, int c1, int r2, int c2, int r3, int c3){
        3:  205-block  0
        -:  206:    // int r, c;  //, r2, c2;
        -:  207:    // printf("\nDecimal Matrix Addition:\n\nEnter the dimensions of the matrix:\n");
        -:  208:    // scanf("%d", &r);
        -:  209:    // scanf("%d", &c);
        -:  210:    // printf("\nEnter the number of rows and columns of the second matrix:\n");
        -:  211:    // scanf("%d", &r1);
        -:  212:    // scanf("%d", &c1);
        -:  213:    
        -:  214:    // printf("\n");
        -:  215:
        -:  216:    // double matrix_1[r][c], matrix_2[r][c], sum[r][c];
        -:  217:    // printf("\nEnter the elements of the first matrix:\n");
        -:  218:    // for(int i=0; i<r; i++){
        -:  219:    //     for(int j=0; j<c; j++){
        -:  220:    //         scanf("%lf", &matrix_1[i][j]);
        -:  221:    //     }
        -:  222:    // }
        -:  223:    // printf("\nEnter the elements of the second matrix:\n");
        -:  224:    // for(int i=0; i<r; i++){
        -:  225:    //     for(int j=0; j<c; j++){
        -:  226:    //         scanf("%lf", &matrix_2[i][j]);
        -:  227:    //     }
        -:  228:    // }
        -:  229:
        -:  230:    // double **matrix_1 = (double **)malloc(r * sizeof(double *));
        -:  231:    // for (int i = 0; i < r; i++)
        -:  232:        // matrix_1[i] = (double *)malloc(c * sizeof(double));
        -:  233:    // double **matrix_2 = (double **)malloc(r * sizeof(double *));
        -:  234:    // for (int i = 0; i < r; i++)
        -:  235:        // matrix_2[i] = (double *)malloc(c * sizeof(double));
        -:  236:
        -:  237:    // inputDouble(matrix_1, matrix_2, r, c, -1, -1);
        -:  238:    
        -:  239:    // double sum[r][c];
        -:  240:
        3:  241:    if(r1!=r2 || c1!=c2){
        3:  241-block  0
        3:  241-block  1
        4:  242:        for(int i=0; i<r1; i++){
        1:  242-block  0
        3:  242-block  1
        4:  242-block  2
       12:  243:            for(int j=0; j<c1; j++){
        3:  243-block  0
        9:  243-block  1
       12:  243-block  2
        9:  244:                res_matd[i][j] = UNDERFLOW;
        -:  245:            }
        -:  246:        }
        1:  247:        return ERROR_OUT_OF_RANGE;
        1:  247-block  0
        -:  248:    }
        7:  249:    for(int i=0; i<r1; i++){
        2:  249-block  0
        5:  249-block  1
        7:  249-block  2
       18:  250:        for(int j=0; j<c1; j++){
        5:  250-block  0
       13:  250-block  1
       18:  250-block  2
       13:  251:            res_matd[i][j] = matd1[i][j] + matd2[i][j];
        -:  252:        }
        -:  253:    }
        2:  254:    return SUCCESS;
        2:  254-block  0
        -:  255:
        -:  256:    // system("cls");
        -:  257:
        -:  258:    // printf("\nFirst matrix:\n");
        -:  259:    // printDouble(matrix_1, r, c);
        -:  260:    
        -:  261:    // for(int i=0; i<r; i++){
        -:  262:    //     for(int j=0; j<c; j++){
        -:  263:    //         printf("%lf ", matrix_1[i][j]);
        -:  264:    //     }
        -:  265:    //     printf("\n");
        -:  266:    // }
        -:  267:    
        -:  268:    // printf("\nSecond matrix:\n");
        -:  269:    // printDouble(matrix_2, r, c);
        -:  270:    
        -:  271:    // for(int i=0; i<r; i++){
        -:  272:    //     for(int j=0; j<c; j++){
        -:  273:    //         printf("%lf ", matrix_2[i][j]);
        -:  274:    //     }
        -:  275:    //     printf("\n");
        -:  276:    // }
        -:  277:
        -:  278:    // printf("\n Sum of the matrices:\n");
        -:  279:    // printDouble(sum, r, c);
        -:  280:
        -:  281:    // for(int i=0; i<r; i++){
        -:  282:    //     for(int j=0; j<c; j++){
        -:  283:    //         printf("%lf ", sum[i][j]);
        -:  284:    //     }
        -:  285:    //     printf("\n");
        -:  286:    // }
        -:  287:
        -:  288:    // printf("\nExiting in 5 seconds...");
        -:  289:    // delay(5);
        -:  290:}
        -:  291:
        -:  292:
        3:  293:error_t matrixDifference(long int** mat1, long int** mat2, long int** res_mat, int r1, int c1, int r2, int c2, int r3, int c3){
        3:  293-block  0
        -:  294:    // int r, c;  //, r2, c2;
        -:  295:    // printf("\nDecimal Matrix Addition:\n\nEnter the dimensions of the matrix:\n");
        -:  296:    // scanf("%d", &r);
        -:  297:    // scanf("%d", &c);
        -:  298:    // printf("\nEnter the number of rows and columns of the second matrix:\n");
        -:  299:    // scanf("%d", &r1);
        -:  300:    // scanf("%d", &c1);
        -:  301:    
        -:  302:    // printf("\n");
        -:  303:
        -:  304:    // int matrix_1[r][c], matrix_2[r][c], difference[r][c];
        -:  305:    // printf("\nEnter the elements of the first matrix:\n");
        -:  306:    // for(int i=0; i<r; i++){
        -:  307:    //     for(int j=0; j<c; j++){
        -:  308:    //         scanf("%d", &matrix_1[i][j]);
        -:  309:    //     }
        -:  310:    // }
        -:  311:    // printf("\nEnter the elements of the second matrix:\n");
        -:  312:    // for(int i=0; i<r; i++){
        -:  313:    //     for(int j=0; j<c; j++){
        -:  314:    //         scanf("%d", &matrix_2[i][j]);
        -:  315:    //     }
        -:  316:    // }
        -:  317:
        -:  318:    // int **matrix_1 = (int **)malloc(r * sizeof(int *));
        -:  319:    // for (int i = 0; i < r; i++)
        -:  320:    //     matrix_1[i] = (int *)malloc(c * sizeof(int));
        -:  321:    // int **matrix_2 = (int **)malloc(r * sizeof(int *));
        -:  322:    // for (int i = 0; i < r; i++)
        -:  323:        // matrix_2[i] = (int *)malloc(c * sizeof(int));
        -:  324:    
        -:  325:    // inputInteger(matrix_1, matrix_2, r, c, -1, -1);
        -:  326:
        -:  327:    // int difference[r][c];
        -:  328:
        3:  329:    if(r1!=r2 || c1!=c2){
        3:  329-block  0
        3:  329-block  1
        4:  330:        for(int i=0; i<r1; i++){
        1:  330-block  0
        3:  330-block  1
        4:  330-block  2
       12:  331:            for(int j=0; j<c1; j++){
        3:  331-block  0
        9:  331-block  1
       12:  331-block  2
        9:  332:                res_mat[i][j] = UNDERFLOW;
        -:  333:            }
        -:  334:        }
        1:  335:        return ERROR_OUT_OF_RANGE;
        1:  335-block  0
        -:  336:    }
        7:  337:    for(int i=0; i<r1; i++){
        2:  337-block  0
        5:  337-block  1
        7:  337-block  2
       18:  338:        for(int j=0; j<c1; j++){
        5:  338-block  0
       13:  338-block  1
       18:  338-block  2
       13:  339:            res_mat[i][j] = mat1[i][j] - mat2[i][j];
        -:  340:        }
        -:  341:    }
        2:  342:    return SUCCESS;
        2:  342-block  0
        -:  343:
        -:  344:    // system("cls");
        -:  345:
        -:  346:    // printf("\nFirst matrix:\n");
        -:  347:    // printInteger(matrix_1, r, c);
        -:  348:
        -:  349:    // for(int i=0; i<r; i++){
        -:  350:    //     for(int j=0; j<c; j++){
        -:  351:    //         printf("%d ", matrix_1[i][j]);
        -:  352:    //     }
        -:  353:    //     printf("\n");
        -:  354:    // }
        -:  355:
        -:  356:    // printf("\nSecond matrix:\n");
        -:  357:    // printInteger(matrix_2, r, c);
        -:  358:
        -:  359:    // for(int i=0; i<r; i++){
        -:  360:    //     for(int j=0; j<c; j++){
        -:  361:    //         printf("%d ", matrix_2[i][j]);
        -:  362:    //     }
        -:  363:    //     printf("\n");
        -:  364:    // }
        -:  365:
        -:  366:    // printf("\n Difference of the matrices:\n");
        -:  367:    // printInteger(difference, r, c);
        -:  368:
        -:  369:    // for(int i=0; i<r; i++){
        -:  370:    //     for(int j=0; j<c; j++){
        -:  371:    //         printf("%d ", difference[i][j]);
        -:  372:    //     }
        -:  373:    //     printf("\n");
        -:  374:    // }
        -:  375:
        -:  376:    // printf("\nExiting in 5 seconds...");
        -:  377:    // delay(5);
        -:  378:}
        -:  379:
        -:  380:
        3:  381:error_t matrixDifferenceDouble(double** matd1, double** matd2, double** res_matd, int r1, int c1, int r2, int c2, int r3, int c3){
        3:  381-block  0
        -:  382:    // int r, c;  //, r2, c2;
        -:  383:    // printf("\nDecimal Matrix Addition:\n\nEnter the dimensions of the matrix:\n");
        -:  384:    // scanf("%d", &r);
        -:  385:    // scanf("%d", &c);
        -:  386:    // printf("\nEnter the number of rows and columns of the second matrix:\n");
        -:  387:    // scanf("%d", &r1);
        -:  388:    // scanf("%d", &c1);
        -:  389:   
        -:  390:    // printf("\n");
        -:  391:
        -:  392:    // double matrix_1[r][c], matrix_2[r][c], difference[r][c];
        -:  393:    // printf("\nEnter the elements of the first matrix:\n");
        -:  394:    // for(int i=0; i<r; i++){
        -:  395:    //     for(int j=0; j<c; j++){
        -:  396:    //         scanf("%lf", &matrix_1[i][j]);
        -:  397:    //     }
        -:  398:    // }
        -:  399:    // printf("\nEnter the elements of the second matrix:\n");
        -:  400:    // for(int i=0; i<r; i++){
        -:  401:    //     for(int j=0; j<c; j++){
        -:  402:    //         scanf("%lf", &matrix_2[i][j]);
        -:  403:    //     }
        -:  404:    // }
        -:  405:
        -:  406:    // double **matrix_1 = (double **)malloc(r * sizeof(double *));
        -:  407:    // for (int i = 0; i < r; i++)
        -:  408:        // matrix_1[i] = (double *)malloc(c * sizeof(double));
        -:  409:    // double **matrix_2 = (double **)malloc(r * sizeof(double *));
        -:  410:    // for (int i = 0; i < r; i++)
        -:  411:        // matrix_2[i] = (double *)malloc(c * sizeof(double));
        -:  412:    
        -:  413:    // inputDouble(matrix_1, matrix_2, r, c, -1, -1);
        -:  414:    
        -:  415:    // double difference[r][c];
        -:  416:
        3:  417:    if(r1!=r2 || c1!=c2){
        3:  417-block  0
        3:  417-block  1
        4:  418:        for(int i=0; i<r1; i++){
        1:  418-block  0
        3:  418-block  1
        4:  418-block  2
       12:  419:            for(int j=0; j<c1; j++){
        3:  419-block  0
        9:  419-block  1
       12:  419-block  2
        9:  420:                res_matd[i][j] = UNDERFLOW;
        -:  421:            }
        -:  422:        }
        1:  423:        return ERROR_OUT_OF_RANGE;
        1:  423-block  0
        -:  424:    }
        7:  425:    for(int i=0; i<r1; i++){
        2:  425-block  0
        5:  425-block  1
        7:  425-block  2
       18:  426:        for(int j=0; j<c1; j++){
        5:  426-block  0
       13:  426-block  1
       18:  426-block  2
       13:  427:            res_matd[i][j] = matd1[i][j] - matd2[i][j];
        -:  428:        }
        -:  429:    }
        2:  430:    return SUCCESS;
        2:  430-block  0
        -:  431:
        -:  432:    // system("cls");
        -:  433:
        -:  434:    // printf("\nFirst matrix:\n");
        -:  435:    // printDouble(matrix_1, r, c);
        -:  436:
        -:  437:    // for(int i=0; i<r; i++){
        -:  438:    //     for(int j=0; j<c; j++){
        -:  439:    //         printf("%lf ", matrix_1[i][j]);
        -:  440:    //     }
        -:  441:    //     printf("\n");
        -:  442:    // }
        -:  443:    
        -:  444:    // printf("\nSecond matrix:\n");
        -:  445:    // printDouble(matrix_2, r, c);
        -:  446:    
        -:  447:    // for(int i=0; i<r; i++){
        -:  448:    //     for(int j=0; j<c; j++){
        -:  449:    //         printf("%lf ", matrix_2[i][j]);
        -:  450:    //     }
        -:  451:    //     printf("\n");
        -:  452:    // }
        -:  453:
        -:  454:    // printf("\n Difference of the matrices:\n");
        -:  455:    // printDouble(difference, r, c);
        -:  456:
        -:  457:    // for(int i=0; i<r; i++){
        -:  458:    //     for(int j=0; j<c; j++){
        -:  459:    //         printf("%lf ", difference[i][j]);
        -:  460:    //     }
        -:  461:    //     printf("\n");
        -:  462:    // }
        -:  463:    
        -:  464:    // printf("\nExiting in 5 seconds...");
        -:  465:    // delay(5);
        -:  466:}
        -:  467:
        -:  468:
        3:  469:error_t matrixProduct(long int** mat1, long int** mat2, long int** res_mat, int r1, int c1, int r2, int c2, int r3, int c3){
        3:  469-block  0
        -:  470:    // int r1, c1, r2, c2;
        -:  471:    // printf("\nInteger Matrix Multiplication:\n");
        -:  472:    // printf("\nEnter the dimensions of the first matrix:\n");
        -:  473:    // scanf("%d", &r1);
        -:  474:    // scanf("%d", &c1);
        -:  475:    // printf("\nEnter the dimensions of the second matrix:\n");
        -:  476:    // scanf("%d", &r2);
        -:  477:    // scanf("%d", &c2);
        -:  478:
        -:  479:    // int matrix_1[r1][c1], matrix_2[r2][c2], product[r1][c2];
        -:  480:    // printf("\nEnter the elements of the first matrix:\n");
        -:  481:    // for(int i=0; i<r1; i++){
        -:  482:    //     for(int j=0; j<c1; j++){
        -:  483:    //         scanf("%lf", &matrix_1[i][j]);
        -:  484:    //     }
        -:  485:    // }
        -:  486:    // printf("\nEnter the elements of the second matrix:\n");
        -:  487:    // for(int i=0; i<r2; i++){
        -:  488:    //     for(int j=0; j<c2; j++){
        -:  489:    //         scanf("%lf", &matrix_2[i][j]);
        -:  490:    //     }
        -:  491:    // }
        -:  492:
        -:  493:    // int **matrix_1 = (int **)malloc(r1 * sizeof(int *));
        -:  494:    // for (int i = 0; i < r1; i++)
        -:  495:    //     matrix_1[i] = (int *)malloc(c1 * sizeof(int));
        -:  496:    // int **matrix_2 = (int **)malloc(r2 * sizeof(int *));
        -:  497:    // for (int i = 0; i < r2; i++)
        -:  498:    //     matrix_2[i] = (int *)malloc(c2 * sizeof(int));
        -:  499:    
        -:  500:    // inputInteger(matrix_1, matrix_2, r1, c1, r2, c2);
        -:  501:
        -:  502:    // int product[r1][c2];
        -:  503:
        3:  504:    if(c1!=r2){
        3:  504-block  0
        4:  505:        for(int i=0; i<r3; i++){
        1:  505-block  0
        3:  505-block  1
        4:  505-block  2
        9:  506:            for(int j=0; j<c3; j++){
        3:  506-block  0
        6:  506-block  1
        9:  506-block  2
        6:  507:                res_mat[i][j] = UNDERFLOW;
        -:  508:            }
        -:  509:        }
        1:  510:        return ERROR_OUT_OF_RANGE;
        1:  510-block  0
        -:  511:    }
        6:  512:    for(int i=0;i<r1;i++){
        2:  512-block  0
        4:  512-block  1
        6:  512-block  2
       12:  513:        for(int j=0;j<c2;j++){
        4:  513-block  0
        8:  513-block  1
       12:  513-block  2
        8:  514:            res_mat[i][j]=0;
       28:  515:            for(int k=0;k<c1;k++){
        8:  515-block  0
       20:  515-block  1
       28:  515-block  2
       20:  516:                res_mat[i][j] += mat1[i][k] * mat2[k][j];
        -:  517:            }
        -:  518:        }
        -:  519:    }
        2:  520:    return SUCCESS;
        2:  520-block  0
        -:  521:
        -:  522:    // system("cls");
        -:  523:
        -:  524:    // printf("\nFirst matrix:\n");
        -:  525:    // printInteger(matrix_1, r1, c1);
        -:  526:
        -:  527:    // for(int i=0; i<r1; i++){
        -:  528:    //     for(int j=0; j<c1; j++){
        -:  529:    //         printf("%d ", matrix_1[i][j]);
        -:  530:    //     }
        -:  531:    //     printf("\n");
        -:  532:    // }
        -:  533:
        -:  534:    // printf("\nSecond matrix:\n");
        -:  535:    // printInteger(matrix_2, r2, c2);
        -:  536:
        -:  537:    // for(int i=0; i<r2; i++){
        -:  538:    //     for(int j=0; j<c2; j++){
        -:  539:    //         printf("%d ", matrix_2[i][j]);
        -:  540:    //     }
        -:  541:    //     printf("\n");
        -:  542:    // }
        -:  543:
        -:  544:    // printf("\n Product of the matrices:\n");
        -:  545:    // printInteger(product, r1, c2);
        -:  546:
        -:  547:    // for(int i=0; i<r1; i++){
        -:  548:    //     for(int j=0; j<c2; j++){
        -:  549:    //         printf("%d ", product[i][j]);
        -:  550:    //     }
        -:  551:    //     printf("\n");
        -:  552:    // }
        -:  553:
        -:  554:    // printf("\nExiting in 5 seconds...");
        -:  555:    // delay(5);
        -:  556:}
        -:  557:
        -:  558:
        3:  559:error_t matrixProductDouble(double** matd1, double** matd2, double** res_matd, int r1, int c1, int r2, int c2, int r3, int c3){
        3:  559-block  0
        -:  560:    // int r1, c1, r2, c2;
        -:  561:    // printf("\nInteger Matrix Multiplication:\n");
        -:  562:    // printf("\nEnter the dimensions of the first matrix:\n");
        -:  563:    // scanf("%d", &r1);
        -:  564:    // scanf("%d", &c1);
        -:  565:    // printf("\nEnter the dimensions of the second matrix:\n");
        -:  566:    // scanf("%d", &r2);
        -:  567:    // scanf("%d", &c2);
        -:  568:
        -:  569:    // int matrix_1[r1][c1], matrix_2[r2][c2], product[r1][c2];
        -:  570:    // printf("\nEnter the elements of the first matrix:\n");
        -:  571:    // for(int i=0; i<r1; i++){
        -:  572:    //     for(int j=0; j<c1; j++){
        -:  573:    //         scanf("%lf", &matrix_1[i][j]);
        -:  574:    //     }
        -:  575:    // }
        -:  576:    // printf("\nEnter the elements of the second matrix:\n");
        -:  577:    // for(int i=0; i<r2; i++){
        -:  578:    //     for(int j=0; j<c2; j++){
        -:  579:    //         scanf("%lf", &matrix_2[i][j]);
        -:  580:    //     }
        -:  581:    // }
        -:  582:
        -:  583:    // double **matrix_1 = (double **)malloc(r1 * sizeof(double *));
        -:  584:    // for (int i = 0; i < r1; i++)
        -:  585:    //     matrix_1[i] = (double *)malloc(c1 * sizeof(double));
        -:  586:    // double **matrix_2 = (double **)malloc(r2 * sizeof(double *));
        -:  587:    // for (int i = 0; i < r2; i++)
        -:  588:    //     matrix_2[i] = (double *)malloc(c2 * sizeof(double));
        -:  589:    
        -:  590:    // inputDouble(matrix_1, matrix_2, r1, c1, r2, c2);
        -:  591:      
        -:  592:    // double product[r1][c2];
        -:  593:
        3:  594:    if(c1!=r2){
        3:  594-block  0
        4:  595:        for(int i=0; i<r3; i++){
        1:  595-block  0
        3:  595-block  1
        4:  595-block  2
        9:  596:            for(int j=0; j<c3; j++){
        3:  596-block  0
        6:  596-block  1
        9:  596-block  2
        6:  597:                res_matd[i][j] = UNDERFLOW;
        -:  598:            }
        -:  599:        }
        1:  600:        return ERROR_OUT_OF_RANGE;
        1:  600-block  0
        -:  601:    }
        6:  602:    for(int i=0;i<r1;i++){
        2:  602-block  0
        4:  602-block  1
        6:  602-block  2
       12:  603:        for(int j=0;j<c2;j++){
        4:  603-block  0
        8:  603-block  1
       12:  603-block  2
        8:  604:            res_matd[i][j]=0;
       28:  605:            for(int k=0;k<c1;k++){
        8:  605-block  0
       20:  605-block  1
       28:  605-block  2
       20:  606:                res_matd[i][j] += matd1[i][k] * matd2[k][j];
        -:  607:            }
        -:  608:        }
        -:  609:    }
        2:  610:    return SUCCESS;
        2:  610-block  0
        -:  611:
        -:  612:    // system("cls");
        -:  613:
        -:  614:    // printf("\nFirst matrix:\n");
        -:  615:    // printDouble(matrix_1, r1, c1);
        -:  616:    
        -:  617:    // for(int i=0; i<r1; i++){
        -:  618:    //     for(int j=0; j<c1; j++){
        -:  619:    //         printf("%lf ", matrix_1[i][j]);
        -:  620:    //     }
        -:  621:    //     printf("\n");
        -:  622:    // }
        -:  623:
        -:  624:    // printf("\nSecond matrix:\n");
        -:  625:    // printDouble(matrix_2, r2, c2);
        -:  626:    
        -:  627:    // for(int i=0; i<r2; i++){
        -:  628:    //     for(int j=0; j<c2; j++){
        -:  629:    //         printf("%lf ", matrix_2[i][j]);
        -:  630:    //     }
        -:  631:    //     printf("\n");
        -:  632:    // }
        -:  633:
        -:  634:    // printf("\n Product of the matrices:\n");
        -:  635:    // printDouble(product, r1, c2);
        -:  636:
        -:  637:    // for(int i=0; i<r1; i++){
        -:  638:    //     for(int j=0; j<c2; j++){
        -:  639:    //         printf("%lf ", product[i][j]);
        -:  640:    //     }
        -:  641:    //     printf("\n");
        -:  642:    // }
        -:  643:
        -:  644:    // printf("\nExiting in 5 seconds...");
        -:  645:    // delay(5);
        -:  646:}
        -:  647:
        -:  648:
        2:  649:error_t matrixTranspose(long int** mat1, long int** res_mat, int r1, int c1, int r3, int c3){
        2:  649-block  0
        -:  650:    // int r, c;
        -:  651:
        -:  652:    // printf("\nInteger Matrix Transpose:\n\nEnter the dimensions of the matrix:\n");
        -:  653:    // scanf("%d", &r);
        -:  654:    // scanf("%d", &c);
        -:  655:
        -:  656:    // int matrix[r][c], transpose[c][r];
        -:  657:    
        -:  658:    // for(int i=0; i<r; i++){
        -:  659:    //     for(int j=0; j<c; j++){
        -:  660:    //         scanf("%d", matrix[i][j]);
        -:  661:    //     }
        -:  662:    // }
        -:  663:
        6:  664:    for (int i = 0; i < r1; ++i){
        2:  664-block  0
        4:  664-block  1
        6:  664-block  2
       14:  665:        for (int j = 0; j < c1; ++j){
        4:  665-block  0
       10:  665-block  1
       14:  665-block  2
       10:  666:            res_mat[j][i] = mat1[i][j];
        -:  667:        }
        -:  668:    }
        2:  669:    return SUCCESS;
        2:  669-block  0
        -:  670:    
        -:  671:    // system("cls");
        -:  672:    // printf("\nInput matrix:\n");
        -:  673:    // printInteger(matrix, r, c);
        -:  674:    
        -:  675:    // for(int i=0; i<r; i++){
        -:  676:    //     for(int j=0; j<c; j++){
        -:  677:    //         printf("%d ", matrix[i][j]);
        -:  678:    //     }
        -:  679:    //     printf("\n");
        -:  680:    // }
        -:  681:
        -:  682:    // printf("\nTranspose of the matrix:\n");
        -:  683:    // printInteger(transpose, c, r);
        -:  684:    
        -:  685:    // for(int i=0; i<c; i++){
        -:  686:    //     for(int j=0; j<r; j++){
        -:  687:    //         printf("%d ", transpose[i][j]);
        -:  688:    //     }
        -:  689:    //     printf("\n");
        -:  690:    // }
        -:  691:
        -:  692:    // printf("\nExiting in 5 seconds...");
        -:  693:    // delay(5);
        -:  694:}
        -:  695:
        -:  696:
        2:  697:error_t matrixTransposeDouble(double** matd1,double** res_matd, int r1, int c1,int r3, int c3){
        2:  697-block  0
        -:  698:    // int r, c;
        -:  699:
        -:  700:    // printf("\nDecimal Matrix Transpose:\n\nEnter the dimensions of the matrix:\n");
        -:  701:    // scanf("%d", &r);
        -:  702:    // scanf("%d", &c);
        -:  703:
        -:  704:    // double matrix[r][c], transpose[c][r];
        -:  705:    
        -:  706:    // for(int i=0; i<r; i++){
        -:  707:    //     for(int j=0; j<c; j++){
        -:  708:    //         scanf("%lf", matrix[i][j]);
        -:  709:    //     }
        -:  710:    // }
        -:  711:
        6:  712:    for (int i = 0; i < r1; ++i){
        2:  712-block  0
        4:  712-block  1
        6:  712-block  2
       14:  713:        for (int j = 0; j < c1; ++j){
        4:  713-block  0
       10:  713-block  1
       14:  713-block  2
       10:  714:            res_matd[j][i] = matd1[i][j];
        -:  715:        }
        -:  716:    }
        2:  717:    return SUCCESS;
        2:  717-block  0
        -:  718:    
        -:  719:    // system("cls");
        -:  720:    // printf("\nInput matrix:\n");
        -:  721:    // printDouble(matrix, r, c);
        -:  722:    
        -:  723:    // for(int i=0; i<r; i++){
        -:  724:    //     for(int j=0; j<c; j++){
        -:  725:    //         printf("%lf ", matrix[i][j]);
        -:  726:    //     }
        -:  727:    //     printf("\n");
        -:  728:    // }
        -:  729:
        -:  730:    // printf("\nTranspose of the matrix:\n");
        -:  731:    // printDouble(transpose, c, r);
        -:  732:    
        -:  733:    // for(int i=0; i<c; i++){
        -:  734:    //     for(int j=0; j<r; j++){
        -:  735:    //         printf("%lf ", transpose[i][j]);
        -:  736:    //     }
        -:  737:    //     printf("\n");
        -:  738:    // }
        -:  739:
        -:  740:    // printf("\nExiting in 5 seconds...");
        -:  741:    // delay(5);
        -:  742:}
